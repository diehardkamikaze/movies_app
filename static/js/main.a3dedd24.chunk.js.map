{"version":3,"sources":["interface/Nav.tsx","constants.tsx","interface/pages/Main/Controls.tsx","utils/queries.ts","redux/actionCreators.js","interface/pages/Main/Item.tsx","interface/pages/Main/Items.tsx","interface/pages/Main/ErrorMsg.tsx","interface/pages/Main.tsx","interface/pages/About.tsx","interface/Loader.tsx","interface/pages/Details.tsx","App.tsx","redux/store.js","redux/reducers/rootReducer.js","reportWebVitals.ts","index.tsx"],"names":["Nav","className","to","exact","activeClassName","SEARCH_API","URL","searchParams","set","DETAILS_API","MOVIE_SEARCH","MOVIES_SORT","MOVIES_MORE","Controls","dispatch","useDispatch","searchValueRef","useRef","htmlFor","ref","type","id","placeholder","required","onClick","current","value","query","page","toString","fetch","then","responce","json","result","catch","error","console","log","Response","Error","getMovies","payload","Item","Poster","Title","Type","Year","imdbID","src","alt","Items","fullitems","map","item","ErrorMsg","message","style","margin","paddingTop","Main","connect","state","props","Search","About","Loader","Details","useParams","useState","movieData","setMovieData","useEffect","getDetails","Awards","Plot","cellSpacing","cellPadding","Language","BoxOffice","Country","Released","Runtime","DVD","Genre","Rated","Metascore","imdbRating","Actors","split","actor","Director","Writer","App","basename","process","path","store","createStore","action","length","concat","sort","a","b","parseInt","totalResults","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3dedd24.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../styles/nav.css';\n\nfunction Nav(): JSX.Element | null {\n  return (\n    <nav className=\"main-menu\">\n      <ul>\n        <li><NavLink to=\"/\" exact className=\"button\" activeClassName=\"selected\">Home</NavLink></li>\n        <li><NavLink to=\"/about\" className=\"button\" activeClassName=\"selected\">About us</NavLink></li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","const SEARCH_API = new URL('https://www.omdbapi.com/');\nSEARCH_API.searchParams.set('apikey', 'f62f1494');\n\nconst DETAILS_API = new URL('https://www.omdbapi.com/');\nDETAILS_API.searchParams.set('apikey', 'f62f1494');\n\nconst NOTHING_TXT = 'Use search input to find movies';\n\n// ACTIONS\nconst MOVIE_SEARCH = 'MOVIE_SEARCH';\nconst MOVIES_SORT = 'MOVIE_SORT';\nconst MOVIES_MORE = 'MOVIES_MORE';\n\nexport {\n  SEARCH_API, DETAILS_API, NOTHING_TXT, MOVIE_SEARCH, MOVIES_SORT, MOVIES_MORE,\n};\n","/* eslint-disable react/prop-types */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { MouseEventHandler, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport '../../../styles/controls.css';\nimport { getMovies } from '../../../utils/queries';\nimport { movieSearch } from '../../../redux/actionCreators';\nimport { MOVIES_SORT } from '../../../constants';\n\n/*\n  }, [searchValueRef]); // странно делать такую зависимость\n  const moreHandler = () => {\n    if (searchValueRef.current && searchValueRef.current.value !== '') {\n      getMovies(searchValueRef.current.value, response.Search.length / 10 + 1)\n        .then((result: Test) => {\n          if (result.Response !== 'False') {\n            setResponse((prevState) => {\n              let i = 0;\n              while (prevState.Search.length > i) {\n                result.Search.push(prevState.Search[i]);\n                i += 1;\n              }\n              // console.log(newState);\n              return result;\n            });\n          }\n        });\n    }\n  };\n*/\n\ntype Props = {\n  Response: string,\n  Search: Array<any>,\n  totalResults: string,\n  Error: string\n};\n\nconst Controls: React.FC = () => {\n  const dispatch = useDispatch();\n  const searchValueRef = useRef<any>();\n\n  const searchHandler = () => {\n    if (searchValueRef.current && searchValueRef.current.value) {\n      getMovies(searchValueRef.current.value)\n        .then((result: Props) => {\n          dispatch(movieSearch(result));\n        });\n    }\n  };\n\n  const sortHandler = () => {\n    dispatch({ type: MOVIES_SORT });\n  };\n  return (\n    <div className=\"controls\">\n      <p>\n        <label htmlFor=\"search\">Title: </label>\n        <input ref={searchValueRef} type=\"text\" id=\"search\" placeholder=\"past movie tite here\" required />\n        <input type=\"button\" onClick={searchHandler} className=\"control-button\" value=\"Search\" />\n      </p>\n      <button type=\"button\" onClick={sortHandler} className=\"control-button\">Sort by date</button>\n    </div>\n  );\n};\n\nexport default Controls;\n","import { SEARCH_API, DETAILS_API } from '../constants';\n\nconst getMovies = (query: string, page = 1) => {\n  SEARCH_API.searchParams.set('s', query);\n  SEARCH_API.searchParams.set('page', page.toString());\n  return fetch(SEARCH_API.toString())\n    .then((responce) => responce.json())\n    .then((result) => result)\n    .catch((error) => { console.log(error); return { Response: 'False', Error: 'Network Error' }; });\n};\n\nconst getDetails = (id: string) => {\n  // EDIT return value\n  DETAILS_API.searchParams.set('i', id);\n  return fetch(DETAILS_API.toString())\n    .then((responce) => responce.json())\n    .then((result) => result)\n    .catch((error) => { console.log(error); return { Response: 'False', Error: 'Network Error' }; });\n};\n\nexport { getMovies, getDetails };\n","import { MOVIES_SORT, MOVIE_SEARCH, MOVIES_MORE } from '../constants';\n\nexport function movieSearch(payload) {\n  return {\n    type: MOVIE_SEARCH,\n    payload,\n  };\n}\n\nexport function movieMore(payload) {\n  return {\n    type: MOVIES_MORE,\n    payload,\n  };\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../../../styles/item.css';\n\ntype Props = {\n  Poster: string,\n  Title: string,\n  Type: string,\n  Year: string,\n  imdbID: string,\n};\n\nconst Item: React.FC<Props> = ({\n  Poster, Title, Type, Year, imdbID,\n}) => (\n  <li className=\"item\">\n    <img src={Poster} alt=\"movie poster\" />\n    <h3>{Title}</h3>\n    <p className=\"movie-type\">\n      Type:\n      <span>{Type}</span>\n    </p>\n    <p className=\"year\">\n      Year:\n      <span>{Year}</span>\n    </p>\n    <NavLink className=\"button details\" to={`/movies/${imdbID}`}>More details..</NavLink>\n  </li>\n);\n\nexport default Item;\n","import React, { MouseEventHandler } from 'react';\nimport Item from './Item';\nimport '../../../styles/items.css';\n\ntype Props = {\n  fullitems: Array<any>,\n};\n\nconst Items: React.FC<Props> = ({ fullitems }) => (\n  <ul className=\"search\">\n    {fullitems.map((item) => (\n      <Item\n        key={item.imdbID}\n        Poster={item.Poster}\n        Title={item.Title}\n        Type={item.Type}\n        Year={item.Year}\n        imdbID={item.imdbID}\n      />\n    ))}\n  </ul>\n);\n\nexport default Items;\n","import React from 'react';\n\nconst ErrorMsg: React.FC<{ message: string }> = ({ message }) => (<div style={{ margin: 'auto', paddingTop: 100 }}>{message}</div>);\n\nexport default ErrorMsg;\n","import React, { useCallback, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport Controls from './Main/Controls';\nimport Items from './Main/Items';\nimport { getMovies } from '../../utils/queries';\nimport ErrorMsg from './Main/ErrorMsg';\n\ntype Props = {\n  Response: string,\n  Search: Array<any>,\n  totalResults: string,\n  Error: string\n};\n\nconst MainOld: React.FC<Props> = (props) => {\n  const { Response, Search, Error } = props;\n  return (\n    <>\n      <Controls />\n      { Response !== 'False' ? <Items fullitems={Search} /> : <ErrorMsg message={Error} />}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: Props) => state;\n\nconst Main = connect(mapStateToProps)(MainOld);\n\nexport default Main;\n","import React from 'react';\n\nconst About: React.FC = () => (\n  <div className=\"page about-us\">\n    <h1>About us: </h1>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n      incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco\n      laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse\n      cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa\n      qui officia deserunt mollit anim id est laborum.\n    </p>\n  </div>\n);\n\nexport default About;\n","import React from 'react';\nimport '../styles/loader.css';\n\nconst Loader: React.FC = () => (<div className=\"loader\" />);\n\nexport default Loader;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { getDetails } from '../../utils/queries';\nimport Loader from '../Loader';\nimport '../../styles/details.css';\n\ntype Props = {\n  Poster: string,\n  Title: string,\n  Awards: string,\n  Plot: string,\n  Type: string,\n  Language: string,\n  BoxOffice: string,\n  Country: string,\n  Released: string,\n  Runtime: string,\n  DVD: string, Genre: string,\n  Rated: string,\n  Metascore: string,\n  imdbRating: string,\n  Actors: string,\n  Director: string,\n  Writer: string,\n};\n\nconst Details: React.FC = (props) => {\n  const { id } = useParams<{ id: string }>();\n  const [movieData, setMovieData] = useState<Props>();\n  console.log(movieData);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => { getDetails(id).then((result: Props) => setMovieData(result)); }, []);\n  let toRender = null;\n  if (!movieData) toRender = <Loader />;\n  else {\n    toRender = (\n      <div className=\"page\">\n        <div className=\"poster\">\n          <img src={movieData.Poster} alt=\"movie poster\" />\n        </div>\n        <div className=\"about-movie\">\n          <h1>{movieData.Title}</h1>\n          <p className=\"small\">\n            Awards:\n            <span>{movieData.Awards}</span>\n          </p>\n          <p className=\"plot\">{movieData.Plot}</p>\n          <table cellSpacing=\"0\" cellPadding=\"0\">\n            <tr>\n              <th>About movie:</th>\n            </tr>\n            <tr>\n              <td>Type:</td>\n              <td>{movieData.Type}</td>\n            </tr>\n            <tr>\n              <td>Languages:</td>\n              <td>{movieData.Language}</td>\n            </tr>\n            <tr>\n              <td>Boxoffice:</td>\n              <td>{movieData.BoxOffice}</td>\n            </tr>\n            <tr>\n              <td>Country:</td>\n              <td>{movieData.Country}</td>\n            </tr>\n            <tr>\n              <td>Released:</td>\n              <td>{movieData.Released}</td>\n            </tr>\n            <tr>\n              <td>Runtime:</td>\n              <td>{movieData.Runtime}</td>\n            </tr>\n            <tr>\n              <td>On DVD:</td>\n              <td>{movieData.DVD}</td>\n            </tr>\n            <tr>\n              <td>Genre:</td>\n              <td>{movieData.Genre}</td>\n            </tr>\n            <tr>\n              <td>Rated:</td>\n              <td>{movieData.Rated}</td>\n            </tr>\n            <tr>\n              <td>Metascore:</td>\n              <td>{movieData.Metascore}</td>\n            </tr>\n            <tr>\n              <td>IMBD Rating:</td>\n              <td>{movieData.imdbRating}</td>\n            </tr>\n          </table>\n        </div>\n        <div className=\"production\">\n          <h3>Actors:</h3>\n          <ul>\n            {movieData.Actors.split(',').map((actor) => (<li>{actor}</li>))}\n          </ul>\n          <h3>Director:</h3>\n          <p>{movieData.Director}</p>\n          <h3>Writer</h3>\n          <p>{movieData.Writer}</p>\n        </div>\n      </div>\n    );\n  }\n  return (toRender);\n};\n\n/* {\n  Poster, Title, Awards, Plot, Type, Language, BoxOffice,\n  Country, Released, Runtime, DVD, Genre, Rated, Metascore,\n  imdbRating, Actors, Director, Writer,\n}\n  <div className=\"page\">\n    <div className=\"poster\">\n      <img src={Poster} alt=\"movie poster\" />\n    </div>\n    <div className=\"about-movie\">\n      <h1>{Title}</h1>\n      <p className=\"small\">\n        Awards:\n        <span>{Awards}</span>\n      </p>\n      <p className=\"plot\">{Plot}</p>\n      <table cellSpacing=\"0\" cellPadding=\"0\">\n        <tr>\n          <th>About movie:</th>\n        </tr>\n        <tr>\n          <td>Type:</td>\n          <td>{Type}</td>\n        </tr>\n        <tr>\n          <td>Languages:</td>\n          <td>{Language}</td>\n        </tr>\n        <tr>\n          <td>Boxoffice:</td>\n          <td>{BoxOffice}</td>\n        </tr>\n        <tr>\n          <td>Country:</td>\n          <td>{Country}</td>\n        </tr>\n        <tr>\n          <td>Released:</td>\n          <td>{Released}</td>\n        </tr>\n        <tr>\n          <td>Runtime:</td>\n          <td>{Runtime}</td>\n        </tr>\n        <tr>\n          <td>On DVD:</td>\n          <td>{DVD}</td>\n        </tr>\n        <tr>\n          <td>Genre:</td>\n          <td>{Genre}</td>\n        </tr>\n        <tr>\n          <td>Rated:</td>\n          <td>{Rated}</td>\n        </tr>\n        <tr>\n          <td>Metascore:</td>\n          <td>{Metascore}</td>\n        </tr>\n        <tr>\n          <td>IMBD Rating:</td>\n          <td>{imdbRating}</td>\n        </tr>\n      </table>\n    </div>\n    <div className=\"production\">\n      <h3>Actors:</h3>\n      <ul>\n        {Actors.map((actor) => (<li>{actor}</li>))}\n      </ul>\n      <h3>Director:</h3>\n      <p>{Director}</p>\n      <h3>Writer</h3>\n      <p>{Writer}</p>\n    </div>\n  </div>\n);\n*/\nexport default Details;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Nav from './interface/Nav';\nimport Main from './interface/pages/Main';\nimport About from './interface/pages/About';\nimport Details from './interface/pages/Details';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <header className=\"header\">\n          <Nav />\n        </header>\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n          <Route path=\"/movies/:id\">\n            <Details />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore /* , applyMiddleware, combineReducers */ } from 'redux';\n// import createSagaMiddleWare from 'redux-saga';\n// import logger from 'redux-logger';\nimport rootReducer from './reducers/rootReducer';\nimport { NOTHING_TXT } from '../constants';\n\nconst store = createStore(rootReducer, {\n  Response: 'False', Error: NOTHING_TXT, totalResults: '-1', Search: [],\n});\n\nexport default store;\n","import { MOVIES_SORT, MOVIE_SEARCH, MOVIES_MORE } from '../../constants';\n\nexport default function rootReducer(state, action) {\n  switch (action.type) {\n    case MOVIES_MORE:\n      if (action.payload.Search.length) {\n        return { ...state, Search: state.Search.concat(action.payload.Search) };\n      }\n      return state;\n    case MOVIE_SEARCH:\n      return action.payload;\n    case MOVIES_SORT:\n      return {\n        ...state,\n        Search: [...state.Search].sort((a, b) => parseInt(a.Year, 10) - parseInt(b.Year, 10)),\n      };\n    default:\n      return state;\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport './styles/index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}